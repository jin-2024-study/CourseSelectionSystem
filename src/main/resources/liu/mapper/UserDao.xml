<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="liu.dao.UserDao">
    
    <!-- 结果映射 -->
    <resultMap id="UserResultMap" type="liu.entity.User">
        <id property="id" column="id"/>
        <result property="username" column="username"/>
        <result property="password" column="password"/>
        <result property="email" column="email"/>
        <result property="role" column="role"/>
        <result property="enabled" column="enabled"/>
        <result property="createTime" column="create_time"/>
        <result property="updateTime" column="update_time"/>
    </resultMap>

    <!-- 根据用户名查找用户 -->
    <select id="findByUsername" parameterType="string" resultMap="UserResultMap">
        SELECT id, username, password, email, role, enabled, create_time, update_time
        FROM users
        WHERE username = #{username}
    </select>

    <!-- 根据ID查找用户 -->
    <select id="findById" parameterType="int" resultMap="UserResultMap">
        SELECT id, username, password, email, role, enabled, create_time, update_time
        FROM users
        WHERE id = #{id}
    </select>

    <!-- 查询所有用户 -->
    <select id="findAll" resultMap="UserResultMap">
        SELECT id, username, password, email, role, enabled, create_time, update_time
        FROM users
        ORDER BY create_time DESC
    </select>

    <!-- 插入新用户 -->
    <insert id="insert" parameterType="liu.entity.User" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO users (username, password, email, role, enabled, create_time, update_time)
        VALUES (#{username}, #{password}, #{email}, #{role}, #{enabled}, #{createTime}, #{updateTime})
    </insert>

    <!-- 更新用户信息 -->
    <update id="update" parameterType="liu.entity.User">
        UPDATE users
        SET username = #{username},
            password = #{password},
            email = #{email},
            role = #{role},
            enabled = #{enabled},
            update_time = #{updateTime}
        WHERE id = #{id}
    </update>

    <!-- 删除用户 -->
    <delete id="deleteById" parameterType="int">
        DELETE FROM users WHERE id = #{id}
    </delete>

    <!-- 检查用户名是否存在 -->
    <select id="existsByUsername" parameterType="string" resultType="boolean">
        SELECT COUNT(*) > 0 FROM users WHERE username = #{username}
    </select>

</mapper> 